{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Category from \"../../Models/Category\";\nimport Album from \"../../Models/Album\";\nexport var SET_ALBUMS = 'SET_ALBUMS';\nexport var fetchAlbums = function fetchAlbums() {\n  return function _callee(dispatch) {\n    var response, resData, loadedAlbums, feed, albumArray, item, titleDict, title, idSuperDict, idDict, id, artistDict, artist, imageArray, imageDict, imageUrl, priceDict, price, releaseDict, releaseDate, categoryDict, catAttributeDict, category, album;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://itunes.apple.com/us/rss/topalbums/limit=100/json'));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            resData = _context.sent;\n            loadedAlbums = [];\n            feed = resData['feed'];\n            albumArray = feed['entry'];\n\n            for (item in albumArray) {\n              titleDict = item['im:name'];\n              title = titleDict['label'];\n              idSuperDict = item['id'];\n              idDict = idSuperDict['attributes'];\n              id = idDict['im:id'];\n              artistDict = item['im:artist'];\n              artist = artistDict['label'];\n              imageArray = item['im:image'];\n              imageDict = imageArray[2];\n              imageUrl = imageDict['label'];\n              priceDict = item['im:price'];\n              price = priceDict['label'];\n              releaseDict = item['im:releaseDate'];\n              releaseDate = releaseDict['label'];\n              categoryDict = item['category'];\n              catAttributeDict = categoryDict['attributes'];\n              category = new Category(catAttributeDict['im:id'], catAttributeDict['label']);\n              album = new Album(id, name, imageUrl, artist, price, category, releaseDate);\n              loadedAlbums.push(album);\n            }\n\n            dispatch({\n              type: SET_ALBUMS,\n              albums: loadedAlbums\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/ishan/Documents/React Native/ShopmaticDemo/Shopmatic/Store/Actions/Album.js"],"names":["Category","Album","SET_ALBUMS","fetchAlbums","dispatch","fetch","response","json","resData","loadedAlbums","feed","albumArray","item","titleDict","title","idSuperDict","idDict","id","artistDict","artist","imageArray","imageDict","imageUrl","priceDict","price","releaseDict","releaseDate","categoryDict","catAttributeDict","category","album","name","push","type","albums"],"mappings":";AAAA,OAAOA,QAAP;AACA,OAAOC,KAAP;AAEA,OAAO,IAAMC,UAAU,GAAG,YAAnB;AAGP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC7B,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACoBC,KAAK,CACxB,0DADwB,CADzB;;AAAA;AACGC,YAAAA,QADH;AAAA;AAAA,6CAImBA,QAAQ,CAACC,IAAT,EAJnB;;AAAA;AAIGC,YAAAA,OAJH;AAKGC,YAAAA,YALH,GAKkB,EALlB;AAMGC,YAAAA,IANH,GAMUF,OAAO,CAAC,MAAD,CANjB;AAOGG,YAAAA,UAPH,GAOgBD,IAAI,CAAC,OAAD,CAPpB;;AAQH,iBAAWE,IAAX,IAAmBD,UAAnB,EAA8B;AACpBE,cAAAA,SADoB,GACRD,IAAI,CAAC,SAAD,CADI;AAEpBE,cAAAA,KAFoB,GAEZD,SAAS,CAAC,OAAD,CAFG;AAGpBE,cAAAA,WAHoB,GAGNH,IAAI,CAAC,IAAD,CAHE;AAIpBI,cAAAA,MAJoB,GAIXD,WAAW,CAAC,YAAD,CAJA;AAKpBE,cAAAA,EALoB,GAKfD,MAAM,CAAC,OAAD,CALS;AAMpBE,cAAAA,UANoB,GAMPN,IAAI,CAAC,WAAD,CANG;AAOpBO,cAAAA,MAPoB,GAOXD,UAAU,CAAC,OAAD,CAPC;AAQpBE,cAAAA,UARoB,GAQPR,IAAI,CAAC,UAAD,CARG;AASpBS,cAAAA,SAToB,GASRD,UAAU,CAAC,CAAD,CATF;AAUpBE,cAAAA,QAVoB,GAUTD,SAAS,CAAC,OAAD,CAVA;AAWpBE,cAAAA,SAXoB,GAWRX,IAAI,CAAC,UAAD,CAXI;AAYpBY,cAAAA,KAZoB,GAYZD,SAAS,CAAC,OAAD,CAZG;AAapBE,cAAAA,WAboB,GAaNb,IAAI,CAAC,gBAAD,CAbE;AAcpBc,cAAAA,WAdoB,GAcND,WAAW,CAAC,OAAD,CAdL;AAepBE,cAAAA,YAfoB,GAeLf,IAAI,CAAC,UAAD,CAfC;AAgBpBgB,cAAAA,gBAhBoB,GAgBDD,YAAY,CAAC,YAAD,CAhBX;AAiBpBE,cAAAA,QAjBoB,GAiBT,IAAI7B,QAAJ,CAAa4B,gBAAgB,CAAC,OAAD,CAA7B,EAAwCA,gBAAgB,CAAC,OAAD,CAAxD,CAjBS;AAkBpBE,cAAAA,KAlBoB,GAkBZ,IAAI7B,KAAJ,CAAUgB,EAAV,EAAcc,IAAd,EAAoBT,QAApB,EAA8BH,MAA9B,EAAsCK,KAAtC,EAA6CK,QAA7C,EAAuDH,WAAvD,CAlBY;AAmB1BjB,cAAAA,YAAY,CAACuB,IAAb,CAAkBF,KAAlB;AACH;;AAED1B,YAAAA,QAAQ,CAAC;AAAC6B,cAAAA,IAAI,EAAC/B,UAAN;AAAkBgC,cAAAA,MAAM,EAAGzB;AAA3B,aAAD,CAAR;;AA9BG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAiCH,CAlCM","sourcesContent":["import Category from '../../Models/Category'\nimport Album from '../../Models/Album'\n\nexport const SET_ALBUMS = 'SET_ALBUMS';\n\n\nexport const fetchAlbums = () => {\n    return async dispatch => {\n        const response = await fetch(\n            'https://itunes.apple.com/us/rss/topalbums/limit=100/json'\n        );\n        const resData = await response.json();\n        const loadedAlbums = [];\n        const feed = resData['feed'];\n        const albumArray = feed['entry'];\n        for (const item in albumArray){\n            const titleDict = item['im:name'];\n            const title = titleDict['label'];\n            const idSuperDict = item['id'];\n            const idDict = idSuperDict['attributes'];\n            const id = idDict['im:id'];\n            const artistDict = item['im:artist'];\n            const artist = artistDict['label'];\n            const imageArray = item['im:image'];\n            const imageDict = imageArray[2];\n            const imageUrl = imageDict['label'];\n            const priceDict = item['im:price'];\n            const price = priceDict['label'];\n            const releaseDict = item['im:releaseDate'];\n            const releaseDate = releaseDict['label'];\n            const categoryDict = item['category'];\n            const catAttributeDict = categoryDict['attributes'];\n            const category = new Category(catAttributeDict['im:id'], catAttributeDict['label']);\n            const album = new Album(id, name, imageUrl, artist, price, category, releaseDate);\n            loadedAlbums.push(album)\n        }\n        \n        dispatch({type:SET_ALBUMS, albums : loadedAlbums})\n\n    };\n}"]},"metadata":{},"sourceType":"module"}